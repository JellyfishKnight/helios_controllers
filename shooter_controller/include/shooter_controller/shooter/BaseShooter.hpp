// created by liuhan on 2023/12/22
// Submodule of HeliosRobotSystem
// for more see document: https://swjtuhelios.feishu.cn/docx/MfCsdfRxkoYk3oxWaazcfUpTnih?from=from_copylink
/*
 * ██   ██ ███████ ██      ██  ██████  ███████
 * ██   ██ ██      ██      ██ ██    ██ ██
 * ███████ █████   ██      ██ ██    ██ ███████
 * ██   ██ ██      ██      ██ ██    ██      ██
 * ██   ██ ███████ ███████ ██  ██████  ███████
 *
 */
#pragma once

#include <rclcpp/rclcpp.hpp>

#include <helios_control_interfaces/msg/shooter_cmd.hpp>
#include <sensor_interfaces/msg/power_heat_data.hpp>

#include <math_utilities/MotorPacket.hpp>

#include <map>
#include <vector>
#include <string>

// auto generated by ros2 generate_parameter_library
// https://github.com/PickNikRobotics/generate_parameter_library
#include "shooter_controller_parameters.hpp"

namespace helios_control {

#define FIRE 1
#define HOLD 0

typedef enum {
    STOP = 0,
    LOW = 1,
    HIGH = 2,
}ShooterSpeed;

typedef enum {
    SHOOTER_LOCKED = 0,
    SHOOTER_RUNNING = 1,
    DIAL_LOCKED = 2,
    DIAL_RUNNING = 3,
    UNDEFINED = 4,
}ShooterState;

class BaseShooter {
public:
    BaseShooter() = default;

    virtual ~BaseShooter() = default;

    virtual void update_shooter_cmd(helios_control_interfaces::msg::ShooterCmd shooter_cmd, 
                                    sensor_interfaces::msg::PowerHeatData power_heat_data) = 0;

    virtual void update_params(const shooter_controller::Params& params) = 0;

    virtual void update_motors(const std::vector<hardware_interface::LoanedStateInterface>& state_interfaces,
                                std::map<std::string, math_utilities::MotorPacket>& cmd_map) = 0;
};


} // namespace helios_control