// created by liuhan on 2023/12/9
// Submodule of HeliosRobotSystem
// for more see document: https://swjtuhelios.feishu.cn/docx/MfCsdfRxkoYk3oxWaazcfUpTnih?from=from_copylink
/*
 * ██   ██ ███████ ██      ██  ██████  ███████
 * ██   ██ ██      ██      ██ ██    ██ ██
 * ███████ █████   ██      ██ ██    ██ ███████
 * ██   ██ ██      ██      ██ ██    ██      ██
 * ██   ██ ███████ ███████ ██  ██████  ███████
 *
 */
#pragma once

#include <rclcpp/rclcpp.hpp>

#include <angles/angles.h>
#include <hardware_interface/loaned_state_interface.hpp>

#include "math_utilities/MotorPacket.hpp"

#include "helios_control_interfaces/msg/shooter_cmd.hpp"

#include <map>
#include <string.h>
#include <vector>

// auto generated by ros2 generate_parameter_library
// https://github.com/PickNikRobotics/generate_parameter_library
#include "shooter_controller_parameters.hpp"

typedef enum {
    SHOOTER_LOCKED = 0,
    SHOOTER_RUNNING = 1,
    DIAL_RUNNING = 2,
    UNDEFINED = 3,
}ShooterState;

namespace helios_control {

class Shooter {
public:
    Shooter(const shooter_controller::Params& params);

    ~Shooter();

    void update_shooter_cmd(helios_control_interfaces::msg::ShooterCmd shooter_cmd, rclcpp::Time now);

    void update_moto_state(std::map<std::string, math_utilities::MotorPacket>& cmd_map, 
                            std::vector<hardware_interface::LoanedStateInterface>& state_interfaces);

    void update_params(const shooter_controller::Params& params);

private:
    void start_shooter(const helios_control_interfaces::msg::ShooterCmd& shooter_cmd);

    bool is_shooter_runnning();

    void stop_shooter();

    void start_dial(const helios_control_interfaces::msg::ShooterCmd& shooter_cmd);

    bool is_dial_runnning();

    void stop_dial();

    void handle_undefined();

    shooter_controller::Params params_;

    // motors
    math_utilities::MotorPacket* left_up_shooter_;
    math_utilities::MotorPacket* left_down_shooter_;
    math_utilities::MotorPacket* right_up_shooter_;
    math_utilities::MotorPacket* right_down_shooter_;
    math_utilities::MotorPacket* dial_up_;
    math_utilities::MotorPacket* dial_down_;

    ShooterState last_state_;
    double last_shooter_cmd_time_;

    rclcpp::Logger logger_ = rclcpp::get_logger("Shooter");
};


} // namespace helios_control